import asyncio
import websockets
from websockets.exceptions import ConnectionClosedError
import time

prices = {
    'BTC/USDT': [
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
    ],
    'TRX/USDT': [
        0.094,
        0.094,
        0.096,
        0.096,
        0.092,
        0.092,
        0.092,
        0.092,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.090,
        0.096,
        0.097,
        0.097,
        0.098,
        0.098,
        0.099,
        0.102,
        0.105,
        0.105,
        0.106,
        0.107,
        0.108,
        0.110,
        0.112,
        0.112,
        0.113,
        0.120,
        0.120,
        0.120,
        0.120,
        0.118,
        0.118,
        0.118,
        0.118,
        0.115,
        0.113,
        0.113,
        0.115,
        0.115,
        0.115,
        0.115,
        0.110,
        0.110,
        0.103,
        0.103,
        0.103,
        0.101,
        0.101,
        0.101,
        0.097,
        0.097,
        0.095,
        0.095,
        0.095,
        0.092,
        0.092,
        0.092,
        0.092,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.091,
        0.100,
        0.100,
        0.100,
        0.100,
        0.100,
        0.100,
        0.100,
        0.100,
        0.100,
        0.100,
        0.100,
        0.100,
        0.100,
        0.100,
        0.100,
        0.100,
        0.100,
        0.100,
        0.100,
        0.100,
        0.100,
        0.100,
        0.100,
        0.100,
    ],
    'AVAX/USDT': [
        124,
        123,
        122,
        122,
        124,
        125,
        125,
        125,
        125,
        125,
        125,
        125,
        125,
        125,
        125,
        125,
        125,
        125,
        125,
        125,
        125,
        125,
        125,
        125,
        126,
        127,
        128,
        130,
        130,
        130,
        133,
        136,
        136,
        137,
        140,
        140,
        141,
        142,
        144,
        145,

    ],
    'NEAR/USDT': [
        14.6,
        14.6,
        14.6,
        14.3,
        14.3,
        14.3,
        14.3,
        14.3,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        14.75,
        10,
        10,
        10,
        10.5,
        10.5,
        10.5,
        11,
        11,
        11,
        11,
        10.85,
        10.85,
        10.85,
        10.85,
        10.75,
        10.75,
        10.75,
        10.75,
        10.45,
        10.45,
        10.45,
        10.45,
        9.75,
        9.75,
        9.75,
        9.75,
        9.15,
        9.15,
        9.15,
        9.15,
        8.45,
        8.45,
        8.45,
        8.45,
    ],
    'MANA/USDT': [
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
    ]
}


async def send_price(websocket, path):
    while True:
        symbol = await websocket.recv()
        print(symbol)
        while True:
            try:
                price = prices[symbol].pop(0)
                await websocket.send(str(price))
                time.sleep(1)
            except ConnectionClosedError as e:
                print('reconnecting')
                break


start_server = websockets.serve(send_price, "localhost", 9000)

asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever()
